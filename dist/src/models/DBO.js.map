{"version":3,"sources":["../../../src/models/DBO.js"],"names":["DBO","url","connect","console","log","name","password","isAdmin","callback","create","err","user","desc","description","dataset","path","dataset_id","width","height","that","find","datasets","length","j","forEach","i","getOneDatasetsWithCounts","_id","di","all","tagged","getAllCountsOfDataset","count","getTaggedCountsOfDataset","push","countAll","countTagged","datasetImage_id","user_id","tag","update","taggedBy","raw","problem","problems","findOne","datasetImage","$or","$ne","compare","res","remove"],"mappings":"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","file":"DBO.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nimport User from './schemas/UserSchema';\r\nimport Dataset from './schemas/DatasetSchema';\r\nimport DatasetImage from './schemas/DatasetImageSchema';\r\nimport Problem from './schemas/ProblemSchema';\r\n\r\nexport default class DBO {\r\n    constructor(url) {\r\n        mongoose.connect(url);\r\n        console.log(\"połączono z bazą danych: \" + url);\r\n    }\r\n\r\n    addUser(name, password, isAdmin, callback) {\r\n        User.create({\r\n            name: name,\r\n            password: password,\r\n            isAdmin: isAdmin\r\n        }, (err, user) => {\r\n\r\n            // console.log(\"callback\");\r\n            if(err) {\r\n                console.log(\"add user - error \" + err);\r\n                callback(false);\r\n            }\r\n            else {\r\n                console.log(\"Dodano usera - \" + user.name);\r\n                callback(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    addDataset(name, desc, callback) {\r\n        Dataset.create({\r\n            name: name,\r\n            description: desc\r\n        }, (err, dataset) => {\r\n            // console.log(\"callback\");\r\n            if(err) {\r\n                console.log(\"add dataset - error\");\r\n                callback(false, dataset);\r\n            }\r\n            else {\r\n                console.log(\"Dodano dataset - \" + dataset.name);\r\n                callback(true, dataset);\r\n            }\r\n        });\r\n    }\r\n\r\n    addDatasetImage(path, dataset_id, width, height, callback) {\r\n        DatasetImage.create({\r\n            path: path,\r\n            dataset: dataset_id,\r\n            width: width,\r\n            height: height\r\n        }, (err, user) => {\r\n            // console.log(\"callback\");\r\n            if(err) {\r\n                console.log(\"add dataset-iamge - error\");\r\n                callback(false);\r\n            }\r\n            else {\r\n                console.log(\"Dodano dataset-iamge  - \" + user.path);\r\n                callback(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    getDatasetsWithCounts2(callback) {\r\n        let that = this;\r\n        Dataset.find({}, (err, datasets) => {\r\n            if(err)\r\n                console.log(\"problem z getDatasets2\");\r\n            else {\r\n                console.log(\r\n                    \"------ get datasets2 ---\"\r\n                );\r\n\r\n                // let di = [];\r\n\r\n\r\n                console.log(\"length \" + datasets.length);\r\n                let j = 0;\r\n\r\n                datasets.forEach((dataset, i) => {\r\n                   that.getOneDatasetsWithCounts(dataset._id, (dataset) => {\r\n                       j++;\r\n                       if(j == datasets.length - 1)\r\n                            callback(datasets);\r\n                   });\r\n                });\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    getDatasetsWithCounts(callback) {\r\n        let that = this;\r\n        Dataset.find({}, (err, datasets) => {\r\n            if(err)\r\n                console.log(\"problem z getDatasets\");\r\n            else {\r\n                console.log(\r\n                    \"------ get datasets ---\"\r\n                );\r\n\r\n                let di = [];\r\n\r\n\r\n                console.log(\"length \" + datasets.length);\r\n\r\n                if(datasets.length == 0) {\r\n                    console.log(\"callback 1\");\r\n                    callback(datasets);\r\n                    return;\r\n                }\r\n\r\n                let j = 0;\r\n                datasets.forEach((dataset, i) => {\r\n                    let all = 0, tagged = 0;\r\n\r\n                    // console.log(dataset._id);\r\n                    that.getAllCountsOfDataset(dataset._id, (count) => {\r\n                        all = count;\r\n\r\n                        that.getTaggedCountsOfDataset(dataset._id, (count) => {\r\n                            tagged = count;\r\n\r\n                            di.push({\r\n                                countAll: all,\r\n                                countTagged: tagged\r\n                            })\r\n\r\n                            dataset.countAll = all;\r\n                            dataset.countTagged = tagged;\r\n\r\n                            if(j++ == datasets.length-1) {\r\n                                console.log(\"callback 2\");\r\n\r\n                                callback(datasets);\r\n                                return;\r\n                            }\r\n                            console.log(dataset.name + \" - \" + tagged + \"/\" + all);\r\n                        });\r\n                    });\r\n\r\n                });\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    addTag(datasetImage_id, user_id, tag, callback) {\r\n        DatasetImage.update({\r\n            _id: datasetImage_id\r\n        }, {\r\n            tag: tag,\r\n            taggedBy: user_id\r\n        }, (err, raw) => {\r\n            if(err) {\r\n                callback(false);\r\n            }\r\n            else callback(true);\r\n        })\r\n    }\r\n\r\n    addProblem(datasetImage_id, user_id, problem, callback) {\r\n        DatasetImage.update({\r\n            _id: datasetImage_id\r\n        }, {\r\n            problem: problem,\r\n            taggedBy: user_id\r\n        }, (err, raw) => {\r\n            if(err) {\r\n                callback(false);\r\n            }\r\n            else callback(true);\r\n        })\r\n    }\r\n\r\n    addNewProblem(problem, name, callback) {\r\n        Problem.create({\r\n            description: problem,\r\n            name: name\r\n        }, (err, raw) => {\r\n            if(err) {\r\n                callback(false);\r\n            }\r\n            else  {\r\n                console.log(\"Dodano problem - \" + name);\r\n                callback(true);\r\n            }\r\n        })\r\n    }\r\n\r\n    getProblems(callback) {\r\n        Problem.find({}, (err, problems) => {\r\n            if(err)\r\n                console.log(\"problem z pobieraniem problemów\");\r\n            else {\r\n                callback(problems);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    getOneDatasetsWithCounts(dataset_id, callback) {\r\n        let that = this;\r\n        Dataset.findOne({\r\n            _id: dataset_id\r\n        }, (err, dataset) => {\r\n            if(err)\r\n                console.log(\"problem z getDatasets\");\r\n            else {\r\n                // console.log(datasets);\r\n\r\n                // if(datasets.length == 0) {\r\n                //     callback(datasets);\r\n                //     return;\r\n                // }\r\n                // datasets.forEach((dataset, i) => {\r\n                let all = 0, tagged = 0;\r\n\r\n                // console.log(dataset._id);\r\n                that.getAllCountsOfDataset(dataset._id, (count) => {\r\n                    all = count;\r\n\r\n                    that.getTaggedCountsOfDataset(dataset._id, (count) => {\r\n                        tagged = count;\r\n\r\n                        dataset.countAll = all;\r\n                        dataset.countTagged = tagged;\r\n\r\n                        // if(i == datasets.length-1)\r\n                        callback(dataset);\r\n                        console.log(dataset.name + \" - \" + tagged + \"/\" + all);\r\n                    });\r\n                });\r\n\r\n            }\r\n\r\n            // }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    getNextDatasetImage(dataset_id, callback) {\r\n        DatasetImage.findOne({\r\n            dataset: dataset_id,\r\n            tag: '',\r\n            problem: ''\r\n        }, (err, datasetImage) => {\r\n            if(err) throw err;\r\n\r\n            callback(datasetImage);\r\n        });\r\n    }\r\n\r\n    getAllCountsOfDataset(dataset_id, callback) {\r\n        DatasetImage.find({\r\n            dataset: dataset_id\r\n        }, (err, datasets) => {\r\n            if(err) {\r\n                console.log(\"agetAllCountsOfDataset - error\");\r\n                callback(-1);\r\n            }\r\n            else {\r\n                callback(datasets.length);\r\n            }\r\n        });\r\n    }\r\n\r\n    getTaggedCountsOfDataset(dataset_id, callback) {\r\n        DatasetImage.find({\r\n            dataset: dataset_id,\r\n            $or: [\r\n                { tag: { $ne: \"\" } },\r\n                { problem: { $ne: \"\" } }\r\n            ]\r\n        }, (err, datasets) => {\r\n            if(err) {\r\n                console.log(\"getTaggedCountsOfDataset - error\");\r\n                callback(-1);\r\n            }\r\n            else {\r\n                callback(datasets.length);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkIfUserExists(name, callback) {\r\n        User.findOne({\r\n            name: name\r\n        }, (err, user) => {\r\n            if(err || !user) {\r\n                callback(false);\r\n                return;\r\n            }\r\n            else callback(true);\r\n        });\r\n    }\r\n\r\n    checkAuth(name, password, callback) {\r\n        User.findOne({\r\n            name: name\r\n        }, (err, user) => {\r\n            if(err || !user) {\r\n                callback(false, user);\r\n                return;\r\n            }\r\n\r\n            bcrypt.compare(password, user.password, (err, res) => {\r\n                if(res) {\r\n                    callback(true, user);\r\n                } else {\r\n                    callback(false, user);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    removeAll(callback) {\r\n        console.log(\"remove all\");\r\n        User.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie userów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n\r\n        Dataset.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie datasetów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n\r\n        DatasetImage.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie obrazów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n\r\n        Problem.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie problemów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n    }\r\n}"]}