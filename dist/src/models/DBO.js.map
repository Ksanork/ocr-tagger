{"version":3,"sources":["../../../src/models/DBO.js"],"names":["DBO","url","connect","console","log","name","password","isAdmin","callback","create","err","user","desc","description","dataset","path","dataset_id","that","find","datasets","length","forEach","i","all","tagged","getAllCountsOfDataset","_id","count","getTaggedCountsOfDataset","countAll","countTagged","datasetImage_id","user_id","tag","update","taggedBy","raw","findOne","problem","datasetImage","$or","$ne","compare","res","remove"],"mappings":"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","file":"DBO.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport User from './schemas/UserSchema';\r\nimport Dataset from './schemas/DatasetSchema';\r\nimport DatasetImage from './schemas/DatasetImageSchema';\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport default class DBO {\r\n    constructor(url) {\r\n        mongoose.connect(url);\r\n        console.log(\"połączono z bazą danych: \" + url);\r\n    }\r\n\r\n    addUser(name, password, isAdmin, callback) {\r\n        User.create({\r\n            name: name,\r\n            password: password,\r\n            isAdmin: isAdmin\r\n        }, (err, user) => {\r\n            // console.log(\"callback\");\r\n            if(err) {\r\n                console.log(\"add user - error\");\r\n                callback(false);\r\n            }\r\n            else {\r\n                console.log(\"Dodano usera - \" + user.name);\r\n                callback(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    addDataset(name, desc, callback) {\r\n        Dataset.create({\r\n            name: name,\r\n            description: desc\r\n        }, (err, dataset) => {\r\n            // console.log(\"callback\");\r\n            if(err) {\r\n                console.log(\"add dataset - error\");\r\n                callback(false, dataset);\r\n            }\r\n            else {\r\n                console.log(\"Dodano dataset - \" + dataset.name);\r\n                callback(true, dataset);\r\n            }\r\n        });\r\n    }\r\n\r\n    addDatasetImage(path, dataset_id, callback) {\r\n        DatasetImage.create({\r\n            path: path,\r\n            dataset: dataset_id\r\n        }, (err, user) => {\r\n            // console.log(\"callback\");\r\n            if(err) {\r\n                console.log(\"add dataset-iamge - error\");\r\n                callback(false);\r\n            }\r\n            else {\r\n                console.log(\"Dodano dataset-iamge  - \" + user.path);\r\n                callback(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    getDatasetsWithCounts(callback) {\r\n        let that = this;\r\n        Dataset.find({}, (err, datasets) => {\r\n           if(err)\r\n               console.log(\"problem z getDatasets\");\r\n           else {\r\n               // console.log(datasets);\r\n\r\n               if(datasets.length == 0) {\r\n                   callback(datasets);\r\n                   return;\r\n               }\r\n               datasets.forEach((dataset, i) => {\r\n                   let all = 0, tagged = 0;\r\n\r\n                   // console.log(dataset._id);\r\n                   that.getAllCountsOfDataset(dataset._id, (count) => {\r\n                       all = count;\r\n\r\n                       that.getTaggedCountsOfDataset(dataset._id, (count) => {\r\n                           tagged = count;\r\n\r\n                           dataset.countAll = all;\r\n                           dataset.countTagged = tagged;\r\n\r\n                           if(i == datasets.length-1)\r\n                               callback(datasets);\r\n                           console.log(dataset.name + \" - \" + tagged + \"/\" + all);\r\n                       });\r\n                   });\r\n\r\n               });\r\n\r\n           }\r\n        });\r\n    }\r\n\r\n    addTag(datasetImage_id, user_id, tag, callback) {\r\n        DatasetImage.update({\r\n            _id: datasetImage_id\r\n        }, {\r\n            tag: tag,\r\n            taggedBy: user_id\r\n        }, (err, raw) => {\r\n            if(err) {\r\n                callback(false);\r\n            }\r\n            else callback(true);\r\n        })\r\n    }\r\n\r\n    getOneDatasetsWithCounts(dataset_id, callback) {\r\n        let that = this;\r\n        Dataset.findOne({\r\n            _id: dataset_id\r\n        }, (err, dataset) => {\r\n            if(err)\r\n                console.log(\"problem z getDatasets\");\r\n            else {\r\n                // console.log(datasets);\r\n\r\n                // if(datasets.length == 0) {\r\n                //     callback(datasets);\r\n                //     return;\r\n                // }\r\n                // datasets.forEach((dataset, i) => {\r\n                    let all = 0, tagged = 0;\r\n\r\n                    // console.log(dataset._id);\r\n                    that.getAllCountsOfDataset(dataset._id, (count) => {\r\n                        all = count;\r\n\r\n                        that.getTaggedCountsOfDataset(dataset._id, (count) => {\r\n                            tagged = count;\r\n\r\n                            dataset.countAll = all;\r\n                            dataset.countTagged = tagged;\r\n\r\n                            // if(i == datasets.length-1)\r\n                            callback(dataset);\r\n                            console.log(dataset.name + \" - \" + tagged + \"/\" + all);\r\n                        });\r\n                    });\r\n\r\n                }\r\n\r\n            // }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    getNextDatasetImage(dataset_id, callback) {\r\n        DatasetImage.findOne({\r\n            dataset: dataset_id,\r\n            tag: '',\r\n            problem: ''\r\n        }, (err, datasetImage) => {\r\n           if(err) throw err;\r\n\r\n           callback(datasetImage);\r\n        });\r\n    }\r\n\r\n    getAllCountsOfDataset(dataset_id, callback) {\r\n        DatasetImage.find({\r\n            dataset: dataset_id\r\n        }, (err, datasets) => {\r\n            if(err) {\r\n                console.log(\"agetAllCountsOfDataset - error\");\r\n                callback(-1);\r\n            }\r\n            else {\r\n                callback(datasets.length);\r\n            }\r\n        });\r\n    }\r\n\r\n    getTaggedCountsOfDataset(dataset_id, callback) {\r\n        DatasetImage.find({\r\n            dataset: dataset_id,\r\n            $or: [\r\n                { tag: { $ne: \"\" } },\r\n                { problem: { $ne: \"\" } }\r\n            ]\r\n        }, (err, datasets) => {\r\n            if(err) {\r\n                console.log(\"getTaggedCountsOfDataset - error\");\r\n                callback(-1);\r\n            }\r\n            else {\r\n                callback(datasets.length);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkIfUserExists(name, callback) {\r\n        User.findOne({\r\n            name: name\r\n        }, (err, user) => {\r\n            if(err || !user) {\r\n                callback(false);\r\n                return;\r\n            }\r\n            else callback(true);\r\n        });\r\n    }\r\n\r\n    checkAuth(name, password, callback) {\r\n        User.findOne({\r\n            name: name\r\n        }, (err, user) => {\r\n           if(err || !user) {\r\n               callback(false, user);\r\n               return;\r\n           }\r\n\r\n            bcrypt.compare(password, user.password, (err, res) => {\r\n                if(res) {\r\n                    callback(true, user);\r\n                } else {\r\n                    callback(false, user);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    removeAll(callback) {\r\n        console.log(\"remove all\");\r\n        User.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie userów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n\r\n        Dataset.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie datasetów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n\r\n        DatasetImage.remove({}, (err) => {\r\n            if(err)\r\n                console.log(\"problem z usuwaniem\");\r\n            else {\r\n                console.log(\"usuwanie obrazów ok\");\r\n                callback();\r\n            }\r\n\r\n        });\r\n    }\r\n}"]}